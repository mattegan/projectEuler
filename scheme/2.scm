
;; Project Euler Problem #2
;; Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
;;		By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;; By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
;;		find the sum of the even-valued terms.
;;
;; Answer : 4613732

;; v2
;; notes:
;;	-- this solution is identical to the solution below (v1), except the fibn function
;;		is memoized, it decreases running time from ~25 seconds to a 0.01 seconds,
;;		a significant speedup
;;	-- a vector grow function is implemented, as Gambit Scheme does not have one included,
;;		the function takes a vector, places it at the beginning of a new vector of a longer
;;		length, and then fills the tail end of the new vector with anything passed as the
;;		third argument

(begin
	(define vector-grow (lambda (vec size fill)
			(define new (make-vector size fill))
			(define rec (lambda (n)
				(if (< n (vector-length vec))
					(begin
						(vector-set! new n (vector-ref vec n))
						(rec (+ n 1))))))
			(rec 0)
			new))
	(define fibn (lambda (n)
		(define knowns (make-vector 2 1))
		(define interm 0)
		(define internalfib (lambda (k)
			(if (> (vector-length knowns) k)
				(begin
					(vector-ref knowns k))
				(begin
					(set! interm (+ (internalfib (- k 2)) (internalfib (- k 1))))
					(set! knowns (vector-grow knowns (+ k 1) interm))
					(vector-ref knowns k)
				))))
		(internalfib n)
		(vector-ref knowns (- (vector-length knowns) 1))))

	(define evensum 0)
	(define evenfib (lambda (n)
		(let ((fib (fibn n)))
			(if (< fib 4000000)
				(begin
					(if (= (remainder fib 2) 0)
						(begin 
							(set! evensum (+ evensum fib))))
				(evenfib (+ n 1)))))))
	(evenfib 0)
	(display evensum)
)

;; v1
; (begin
; 	(define fibn (lambda (n) 
; 		(if (or (= n 0) (= n 1))
; 			1
; 			(begin (+ (fibn (- n 1)) (fibn (- n 2)))))))
; 	(define evensum 0)
; 	(define evenfib (lambda (n)
; 		(let ((fib (fibn n)))
; 			(display fib)(newline)
; 			(if (< fib 4000000)
; 				(begin
; 					(if (= (remainder fib 2) 0)
; 						(begin 
; 							(set! evensum (+ evensum fib))))
; 				(evenfib (+ n 1)))))))
; 	(evenfib 0)
; 	(display evensum)
; )